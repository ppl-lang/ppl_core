///
   Copyright (C) 2009-2014 Christian Neumanns (www.practical-programming.org)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

factory local_date_time

	java_header
		import java.time.format.DateTimeFormatter;
		import java.time.format.DateTimeParseException;
		import java.time.format.FormatStyle;
		import java.time.Instant;
		import java.time.LocalDateTime;
		import java.time.ZoneId;

		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.fa_signed_int_32;
		import org.ppl.core.basics.scalar.string.fa_string;
		import org.ppl.core.basics.scalar.yes_no.fa_yes_no;
		
		import org.ppl.core.java.comparator.se_comparator_Java_bridge;
		import org.ppl.core.error.java.fa_java_exception;
	end java_header

	java
		private LocalDateTime a_JavaLocalDateTime;

		public LocalDateTime getJavaLocalDateTime() { return a_JavaLocalDateTime; }

		public fa_local_date_time ( LocalDateTime localDateTime ) {

			if (localDateTime == null) throw new IllegalArgumentException ( "Input for fa_local_date_time constructor cannot be null." );

			a_JavaLocalDateTime = localDateTime;
		}

		public fa_local_date_time ( Instant instant ) {

			if (instant == null) throw new IllegalArgumentException (
			    "Input for fa_local_date_time constructor cannot be null." );

            a_JavaLocalDateTime = LocalDateTime.ofInstant ( instant, ZoneId.systemDefault() );
		}

		@Override
		public boolean equals ( Object other ) {

			if ( this == other ) return true;

			if ( ! ( other instanceof ty_local_date_time ) ) return false;
		
			return a_JavaLocalDateTime.equals ( ((ty_local_date_time) other).getJavaLocalDateTime() );
		}
		
		@Override
		public int hashCode() {
			return a_JavaLocalDateTime.hashCode();
		}

		public int compareTo ( ty_local_date_time other ) {
			if ( this == other ) return 0;
			return a_JavaLocalDateTime.compareTo ( other.getJavaLocalDateTime() );
		}
	end java

	function date
        script
            variable r local_date
            java
                v_r = new fa_local_date ( a_JavaLocalDateTime.toLocalDate() );
            end java
            assert r is not null
            
            return r
        .
        tests
            const dt = parse_or_throw ( "2012-12-01T22:30:31" )
            const d = dt.date
            verify d.year.value =v 2012
            verify d.month.value =v 12
            verify d.day.value =v 1
        .
    .

	function time
        script
            variable r local_time
            java
                v_r = new fa_local_time ( a_JavaLocalDateTime.toLocalTime() );
            end java
            assert r is not null
            
            return r
        .
        tests
            const dt = parse_or_throw ( "2012-12-01T22:30:31" )
            const t = dt.time
            verify t.hours.value =v 22
            verify t.minutes.value =v 30
            verify t.seconds.value =v 31
        .
    .

    function plus native:yes
        java
            return new fa_local_date_time ( a_JavaLocalDateTime.plus ( i_duration.getJavaDuration() ) );
        end java
    .
        
    function minus native:yes
        java
            return new fa_local_date_time ( a_JavaLocalDateTime.minus ( i_duration.getJavaDuration() ) );
        end java
    .
    
    function to_zoned_date_time = fa_date_time.create ( date, time, i_time_zone_offset )
        
	function to_string native:yes
		script
			java
			    return new fa_string ( a_JavaLocalDateTime.format ( DateTimeFormatter.ISO_LOCAL_DATE_TIME ) );
			end java
		.
		tests
            const date = fa_local_date.create (
                year = fa_year.create ( 2011 )
                month = fa_month.create ( 7 )
                day = fa_day_of_month.create ( 6 ) )
            const time = fa_local_time.create_HMS (
                hours = fa_hour_of_day.create ( 21 )
                minutes = fa_minutes_of_hour.create ( 7 )
                seconds = fa_seconds_of_minute.create ( 6 ) )

            const dt = create ( date, time )

            verify dt.to_string =v "2011-07-06T21:07:06"
        .
    .

	function format native:yes
		script
			java
			    return new fa_string ( a_JavaLocalDateTime.format ( DateTimeFormatter.ofPattern ( i_pattern.getJavaString() ) ) );
			end java
		.
		tests
            const dt = parse_or_throw ( "2011-07-06T21:07:06" )
            verify dt.format ( "YYYY-MM-dd HH:mm" ) =v "2011-07-06 21:07"
            verify dt.format =v "2011-07-06 21:07:06"
        .
    .
    
	function format_to_long_default_locale native:yes
		script
			java
			    return new fa_string ( a_JavaLocalDateTime.format ( DateTimeFormatter.ofLocalizedDateTime ( FormatStyle.FULL ) ) );
			end java
		.
		tests
            const dt = parse_or_throw ( "2011-07-06T21:07:06" )
            dt.to_string
            // commented because causes Java runtime error for unknown reason
            // OS.out.write_line ( "Default locale date time: " & dt.format_to_long_default_locale )
        .
    .

	function is_equal_to native:yes
		script
			java
				return fa_yes_no.of ( equals ( i_other ) );
			end java
		.
		tests
            const dt1 = parse_or_throw ( "2011-07-06T08:30:44" )
            const dt2 = parse_or_throw ( "2011-07-06T08:30:44" )
            const dt3 = parse_or_throw ( "2011-07-06T08:30:45" )

            verify dt1 =v dt2
            verify dt2 =v dt1
            verify dt1 #v dt3
            verify dt3 #v dt1
            verify dt2 #v dt3
        .
    .

	function compare_to native:yes
		script
			java
				return se_comparator_Java_bridge.Java_to_PPL_comparator_result ( compareTo ( i_other ) );
			end java
		.
		tests
            const dt1 = parse_or_throw ( "2011-07-06T08:30:44" )
            const dt2 = parse_or_throw ( "2011-07-06T08:30:44" )
            const dt3 = parse_or_throw ( "2011-07-06T08:30:43" )

            verify dt1 =v dt2
            verify dt1 >= dt2
            verify dt1 <= dt2
            verify dt1 ># dt3
            verify dt1 >= dt3
            verify dt3 <# dt1
            verify dt3 <= dt1
        .
    .

	function hash_code native:yes
        java
            return new fa_signed_int_32 ( hashCode() );
        end java
    .


	creator create native:yes -> local_date_time
        in date local_date
        in time local_time
		
		script
			java
			    return new fa_local_date_time ( LocalDateTime.of (
					i_date.getJavaLocalDate(), 
					i_time.getJavaLocalTime() ) );
			end java
		.
		tests
            const date = fa_local_date.create (
                year = fa_year.create ( 2011 )
                month = fa_month.create ( 7 )
                day = fa_day_of_month.create ( 6 ) )
            const time = fa_local_time.create_HMS (
                hours = fa_hour_of_day.create ( 21 )
                minutes = fa_minutes_of_hour.create ( 7 )
                seconds = fa_seconds_of_minute.create ( 6 ) )

            const dt = create ( date, time )

            verify dt.to_string =v "2011-07-06T21:07:06"
            verify dt.date.to_string =v "2011-07-06"
            verify dt.time.to_string =v "21:07:06"
        .
    .

	creator now native:yes -> local_date_time
		script
			java
				return new fa_local_date_time ( LocalDateTime.now() );
			end java
		.
		tests
            const dt = now
            OS.out.write_line ( "Current date time: " & dt.to_string )
        .
    .
	
	creator try_parse ( string ) -> local_date_time or parse_object_error<local_date_time>
        script
            variable r local_date_time or null = null
			var java_exception java_exception or null = null
			java
			    try {
    			    v_r = new fa_local_date_time ( LocalDateTime.parse ( i_string.getJavaString() ) );
				} catch ( DateTimeParseException e ) {
					v_java_exception = new fa_java_exception ( e );
				}
			end java
			assert java_exception may be null

			if java_exception is null then
				assert r is not null
				return r
			else
			    return parse_object_error<local_date_time>.create (
                    info = """'{{i_string}}' is not a valid ISO local date-time."""
                    java_exception,
                    data = i_string )
            .
		.
		tests
		    case type of try_parse ( "2011-07-06T08:30:44" )
		        when local_date_time dt
                    verify dt.to_string =v "2011-07-06T08:30:44"
                    verify dt.date.to_string =v "2011-07-06"
                    verify dt.time.to_string =v "08:30:44"
		        when error
                    verify no
            .
            
		    case type of try_parse ( "2011/07-06T08:30:44" )
		        when local_date_time
		            verify no
		        when error
            .
        .
    .
    
%parse_or_throw_creator<local_date_time>

.
