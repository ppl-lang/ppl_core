// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2015 - 2021 Christian Neumanns, email: chris@ppl-lang.dev

template fa_int_32_java_code

	param type_id
	param invalid_check

	java_header
		import java.lang.Integer;
		import java.lang.NumberFormatException;
		import java.text.DecimalFormat;

		import org.ppl.core.basics.scalar.character.fa_character;
		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.fa_signed_int_32;
		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.ty_signed_int_32;
		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.negative_32.fa_neg_32;
		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.positive_32.fa_pos_32;
		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.zero_negative_32.fa_zero_neg_32;
		import org.ppl.core.basics.scalar.number.integer.integer_32_bits.zero_positive_32.fa_zero_pos_32;
		import org.ppl.core.basics.scalar.yes_no.fa_yes_no;

		import org.ppl.core.error.unanticipated.program_error.arithmetic_overflow.ty_arithmetic_overflow_program_error;
		import org.ppl.core.error.unanticipated.program_error.java.se_PEC;

		import org.ppl.core.java.comparator.se_comparator_Java_bridge;
		import org.ppl.core.java.se_java_utilities;
		import org.ppl.core.error.java.se_Java_exception;
	end java_header

	java
		private int a_java_value ;

		public int getJavaInt() { return a_java_value; }

		public fa_{type_id} ( int i_java_value ) {

			if ( i_java_value {invalid_check} ) {
				throw new RuntimeException ( "new fa_{type_id}(): i_java_value {invalid_check} (" + i_java_value + ")" );
			}

			a_java_value = i_java_value;
		}

		@Override
		public boolean equals ( Object other ) {
		
			if ( this == other ) return true;

			if ( ! ( other instanceof ty_signed_int_32 ) ) return false;

			int other_int = ((ty_signed_int_32) other).getJavaInt();
			return a_java_value == other_int;
		}
		
		@Override
		public int hashCode() {
			return a_java_value;
		}

		public int compareTo ( ty_signed_int_32 other ) {
			if ( this == other ) return 0;
			return Integer.compare ( a_java_value, other.getJavaInt() );
		}

		// used by fa_java_code_generator
		public static ty_{type_id} create_from_signed_int_32 ( ty_signed_int_32 i_signed_int_32 ) {
			return i_signed_int_32 == null ? null : new fa_{type_id} ( i_signed_int_32.getJavaInt() );
		}

		private ty_arithmetic_overflow_program_error co_arithmetic_overflow_error ( String i_command_id, long i_value_1, long i_value_2 ) {

            return se_PEC.arithmetic_overflow (
                this.getClass(),
                i_command_id,
                0, null,
                String.valueOf ( i_value_1 ),
                String.valueOf ( i_value_2 ) );
		}
	end java

.
