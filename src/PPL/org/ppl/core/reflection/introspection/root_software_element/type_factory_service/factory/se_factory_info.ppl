service factory_info

    java_header
        import org.ppl.core.reflection.java.se_Java_reflection_class_loader;
        import org.ppl.core.reflection.introspection.java.se_PPL_type_Java_introspection;
        
        import org.ppl.core.basics.scalar.yes_no.fa_yes_no;
    end java_header
    
    // TD? cache
    function factory_paths -> set<factory_path>
    
        script
            const r = mutable_set<factory_path>.create

            se_PPL_module_info.for_each_factory_path ( consumer = { factory_path ->
                r.add ( factory_path )
            } )
            
            return r.make_immutable
        .
        tests
            verify factory_paths.contains ( se_factory_constants.string_path )
        .
    .
    
    function type_of_factory ( factory_path ) -> type_path

        script
            variable r type_path
            java
                Class<?> clazz = se_Java_reflection_class_loader.getClassOrThrow (
                    i_factory_path.getValue().getJavaString() );
                v_r = se_PPL_type_Java_introspection.typePathOfClass ( clazz );
            end java
            assert r is not null
            
            return r
        .
        tests
            verify type_of_factory ( se_factory_constants.string_path ) =v se_common_type_paths.string
        .
    .
    
///
    function is_existing_factory_path ( factory_path ) -> yes_no = \
        is_existing_factory_path_string ( factory_path.value )
.///
    
    function is_existing_factory_path_string native:yes ( factory_path string ) -> yes_no
        java
            // TD for better performance it might be better to use a cached set of all ModuleReader.list() resources
            // in all PPL modules. But this might not work for dynamically loaded classes at runtime
            boolean exists = se_Java_reflection_class_loader.getClassOrNull ( i_factory_path.getJavaString() ) != null;
            return fa_yes_no.of ( exists );
        end java
    .
    
    function factories_implementing_type ( type_path ) -> set<factory_path> or null
    
        script
            const r = mutable_set<factory_path>.create
        
            repeat for each factory_path in factory_paths
                if type_of_factory ( factory_path ) =v i_type_path then
                    r.add ( factory_path )
                .
            .
            
            return r.make_immutable_or_null
        .
        tests
            const set = factories_implementing_type ( se_common_type_paths.string )
            verify set is not null
            verify set.size =v 1
            verify set.contains ( se_factory_constants.string_path )
        .
    .
    
    // TD module_of_factory ( factory_path ) -> module_id

    
    tests
        const timer = simple_timer.create
        timer.start
        const factory_paths = factory_paths
        assert factory_paths.size ># 1
        const factory_paths_time = timer.stop_milliseconds
        %we<factory_paths_time>
        // OS.out.write_line ( factory_paths.to_long_string  )
        
        // OS.out.write_line ( factories_implementing_type ( se_common_type_paths.string )?.to_long_string if_null:"null" )

        timer.start
        const t = factories_implementing_type ( se_common_type_paths.string )
        const factories_implementing_type_time = timer.stop_milliseconds
        %we<factories_implementing_type_time>
        verify t is not null
        OS.out.write_line ( t.to_long_string )
        ///
        .///
    .
.
