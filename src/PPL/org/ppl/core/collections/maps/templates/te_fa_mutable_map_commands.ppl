// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2015 - 2021 Christian Neumanns, email: chris@ppl-lang.dev

template fa_mutable_map_commands

	param immutable_map_factory
	param value_list_factory

    function is_empty native:yes

        java
            return fa_yes_no.of ( a_java_map.isEmpty() );
        end java
    .

    function add

        java
            try {
                a_java_map.put(i_key, i_value);
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
        end java
        
        return this
    .

    function add_if_not_contained native:yes

        java
            try {
                if ( ! a_java_map.containsKey ( i_key ) ) {
                    a_java_map.put ( i_key, i_value );
                }
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
            return this;
        end java
    .

    function add_or_replace native:yes

        java
            try {
                a_java_map.put ( i_key, i_value );
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
            return this;
        end java
    .

    function replace

        java
            try {
                a_java_map.put ( i_key, i_new_value );
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
        end java
        
        return this
    .

    function remove

        java
            try {
                a_java_map.remove ( i_key ) ;
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
        end java
        
        return this
    .

    function remove_if_contained native:yes

        java
            try {
                a_java_map.remove ( i_key ) ;
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
            return this;
        end java
    .

    function remove_all native:yes

        java
            try {
                a_java_map.clear() ;
            } catch ( UnsupportedOperationException e ) {
                se_immutable_Java_collection_checker.mutable_operation_violation();
            }
            return this;
        end java
    .

    function make_immutable_or_null
        
        if is_empty then
            return null
        else
            return make_immutable
        .
    .

    function copy_to_immutable

        variable r map<key:t_key, value:t_value>
        java
            Map<t_key, t_value> copy;
            if ( a_maintain_added_order.getJavaBoolean() ) {
                copy = new LinkedHashMap<t_key, t_value> ( a_java_map );
            } else {
                copy = new HashMap<t_key, t_value> ( a_java_map );
            }
            v_r = new fa_{immutable_map_factory}<t_key, t_value> (
                Collections.unmodifiableMap ( copy ), t_key, t_value );
        end java
        assert r is not null

        return r
    .

    function make_immutable
    
        variable r map<key:t_key, value:t_value>
        java
            a_java_map = Collections.unmodifiableMap ( a_java_map );
            v_r = new fa_{immutable_map_factory}<t_key, t_value> ( a_java_map, t_key, t_value );
        end java
        assert r is not null

        return r
    .
.
