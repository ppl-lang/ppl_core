// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2015 - 2021 Christian Neumanns, email: chris@ppl-lang.dev

factory text_scanner_with_line_column

	attributes private:yes
        
        scanner text_scanner
		
		variable att current_line pos_64
		variable att current_column pos_64
	.

	functions
	
	    current_text_position = text_position.create (
	        line_number = a_current_line
	        column_number = a_current_column )
	    
	    current_line = a_current_line
	    
		current_column = a_current_column
	
        has_more = a_scanner.has_more
    
        current_position = a_scanner.current_position
    
        current_character = a_scanner.current_character
        
        text_at_line = a_scanner.text_at_line ( i_line_number )

        text_at_current_line = a_scanner.text_at_line ( a_current_line )

        remaining_string_to_scan = a_scanner.remaining_string_to_scan
    
    
        // is_at
        
        is_at_character = a_scanner.is_at_character ( character )
    
        is_at_string = a_scanner.is_at_string ( string )
    
        is_at_regex = a_scanner.is_at_regex ( regex )
        
        is_at_regex_with_match_result = a_scanner.is_at_regex_with_match_result ( regex )
        
        is_at_space_or_tab = a_scanner.is_at_space_or_tab
    
        is_at_new_line = a_scanner.is_at_new_line
        
        is_at_space_or_tab_or_new_line = a_scanner.is_at_space_or_tab_or_new_line
    
        is_at_start_of_line = a_scanner.is_at_start_of_line
    
    
        // skip
            
        skip_current_character = consume_current_character #r null
    
        skip_character
            const r = a_scanner.skip_character ( i_character )
            if r then
                update_line_column_for_character ( i_character )
            .
            return r
        .
    
        skip_string
            const r = a_scanner.skip_string ( i_string )
            if r then
                update_line_column ( i_string )
            .
            return r
        .
    
        skip_regex = consume_regex ( i_regex ) #r null
        
        skip_single_new_line = consume_single_new_line #r null
        
        skip_spaces_and_tabs = consume_spaces_and_tabs #r null
        
        skip_spaces_tabs_and_new_lines = consume_spaces_tabs_and_new_lines.result #r null
        
        skip_remaining = a_scanner.skip_remaining
        
        skip_n_characters
            consume_n_characters ( i_n )
        .
        

        // consume
            
        consume_current_character
            const r = a_scanner.consume_current_character
            update_line_column_for_character ( r )
            return r
        .
    
        consume_regex
            const r = a_scanner.consume_regex ( i_regex )
            update_line_column ( r )
            return r
        .
    
        consume_regex_with_match_result
            const r = a_scanner.consume_regex_with_match_result ( i_regex )
            update_line_column ( r?.found )
            return r
        .
    
        consume_single_new_line
            const r = a_scanner.consume_single_new_line
            if r is not null then
                a_current_line = a_current_line + 1L
                a_current_column = 1L
            .
            return r
        .
        
        consume_spaces_and_tabs
            const r = a_scanner.consume_spaces_and_tabs
            update_line_column ( r )
            return r
        .
        
        consume_spaces_tabs_and_new_lines
             
            a_scanner.consume_spaces_tabs_and_new_lines() (
                const r = result
                const l = num_lines )
            update_line_column ( r )
            return result = r, num_lines = l
        .
        
        consume_remaining = a_scanner.consume_remaining
        
        consume_n_characters
            const r = a_scanner.consume_n_characters ( i_n )
            update_line_column ( r )
            return r
        .

    
        // consume_all_including
        
        consume_all_to_character_including
            const r = a_scanner.consume_all_to_character_including ( i_character )
            update_line_column ( r )
            return r
        .
    
        consume_all_to_string_including
            const r = a_scanner.consume_all_to_string_including ( string )
            update_line_column ( r )
            return r
        .
    
        consume_all_to_regex_including
            const r = a_scanner.consume_all_to_regex_including ( regex )
            update_line_column ( r )
            return r
        .
        
        consume_all_to_new_line_including
            const r = a_scanner.consume_all_to_new_line_including
            update_line_column ( r )
            return r
        .
        
        
        // consume_all_excluding
        
        consume_all_to_character_excluding
            const r = a_scanner.consume_all_to_character_excluding ( i_character )
            update_line_column ( r )
            return r
        .
        
        consume_all_to_string_excluding
            const r = a_scanner.consume_all_to_string_excluding ( i_string )
            update_line_column ( r )
            return r
        .
    
        consume_all_to_regex_excluding
            const r = a_scanner.consume_all_to_regex_excluding ( i_regex )
            update_line_column ( r )
            return r
        .
        
        consume_all_to_new_line_or_eof_excluding
            const r = a_scanner.consume_all_to_new_line_or_eof_excluding
            update_line_column ( r )
            return r
        .
    .
    
    functions access:private

        function update_line_column ( consumed string or null )
        
            if consumed is null then
                return
            .
            
            const lines = consumed.split_by_new_line
            if lines.size ># 1 then
                a_current_line = a_current_line + lines.size.to_pos_64 - 1L
                if lines.last as last_line is not null then
                    a_current_column = last_line.size.to_pos_64 + 1L
                else
                    a_current_column = 1L
                .
            else
                a_current_column = a_current_column + i_consumed.size.to_pos_64
            .
        .

        function update_line_column_for_character ( character character or null )
        
            if character is null then
                return
            .
            
            if character =v '\n' or character =v '\r' then
                a_current_line = a_current_line + 1L
                a_current_column = 1L
            else
                a_current_column = a_current_column + 1L
            .
        .
    .

	creator create kind:in_all
        
        this.string_to_scan = i_string_to_scan

        this.scanner = fa_text_scanner.create ( i_string_to_scan )
        
        this.current_line = 1L
        this.current_column = 1L
        
        return this
    .
.
    